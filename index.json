[{"content":"\u003c!DOCTYPE HTML\u003e \u003c!DOCTYPE HTML\u003e 文件操作命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 cd - ls 列出当前目录下所有文件 ls -a 显示所有文件 ls -lht 显示目录中的文件按照修改时间排序 chmod 修改文件权限 chmod +x xxx：给xxx添加可执行权限 chmod +r xxx：给xxx添加可读权限 chmod -x xxx：去掉xxx的可执行权限 chmod 777 xxx：将xxx的权限改成777 chmod 777 xxx -R：递归修改整个文件夹的权限 grep xxx --color 从stdin中读入若干行数据，如果某行中包含xxx，则输出该行；否则忽略该行。--color代表高亮显示 wc 统计行数、单词数、字节数 wc -l：统计行数 wc -w：统计单词数 wc -c：统计字节数 ag xxx 搜索当前目录下的所有文件，检索xxx字符串。并显示出该字段出现在哪个文件 tree 展示当前目录的文件结构 tree /path/to/directory/：展示某个目录的文件结构 tree -a：展示隐藏文件 cut 分割一行内容，从stdin中读入多行数据 示例： echo $PATH | cut -d \u0026#39;:\u0026#39; -f 3,5 输出PATH用:分割后第3、5列数据 echo $PATH | cut -d \u0026#39;:\u0026#39; -f 3-5 输出PATH用:分割后第3-5列数据 echo $PATH | cut -c 3,5 输出PATH的第3、5个字符 echo $PATH | cut -c 3-5 输出PATH的第3-5个字符 sort 将每行内容按字典序排序 xargs 将stdin中的数据用空格或回车分割成命令行参数 more 浏览文件内容 **回车：下一行 空格：下一页 b：上一页 q：退出 less 与more类似，功能更全 回车：下一行 y：上一行 Page Down：下一页 Page Up：上一页 q：退出 head -3 xxx 展示xxx的前3行内容 tail -3 xxx 展示xxx末尾3行内容** 查找record.log中包含AAA，但不包含BBB的记录的总数 cat -v record.log | grep AAA | grep -v BBB | wc -l 创建和删除 1 2 3 4 5 6 创建：mkdir 删除：rm 删除非空目录：rm -rf file目录 删除日志 rm *log (等价: $find ./ -name “*log” -exec rm {} ;) 移动：mv 复制：cp (复制目录：cp -r ) find命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 搜索某个文件路径下的所有*.py文件 find /path/to/directory/ -name \u0026#39;*.py\u0026#39; 忽略大小写搜索 find /home -iname \u0026#34;*.txt\u0026#34; 当前目录及子目录下查找所有以.txt 和.pdf 结尾的文件 find . -name \u0026#34;*.txt\u0026#34; -o -name \u0026#34;*.pdf\u0026#34; 查看当前目录下文件个数 find ./ | wc -l 按类型搜索，只列出所有目录，-type f 文件 / l 符号链接 / d 目录 find . -type d -print grep文本搜索 1 2 3 4 5 6 7 8 9 对指定文件输出默认匹配的行 grep match_patten \u0026lt;file\u0026gt; 常用参数 -c 统计文件中包含文本的次数 -n 打印匹配的行号 -i 搜索时忽略大小写 在多级目录中对文本递归搜索(程序员搜代码的最爱） grep \u0026#34;class\u0026#34; . -R -n xargs命令行参数转换 xargs 能够将输入数据转化为特定命令的命令行参数；这样，可以配合很多命令来组合使用。比如grep，比如find；\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 xargs参数说明 -d 定义定界符 （默认为空格 多行的定界符为 n） -n 指定输出为多行 -I {} 指定替换字符串，这个字符串在xargs扩展时会被替换掉,用于待执行的命令需要多个参数时 -0：指定0为输入定界符 将多行输出转化为单行输出 cat file.txt| xargs 将单行转化为多行输出，-n：指定每行显示的字段数 cat single.txt | xargs -n 3 cat file.txt | xargs -I {} ./command.sh -p {} -1 wc统计行和字符的工具 1 2 3 4 5 6 7 8 统计行数 wc -l file 统计单词数 wc -w file 统计字符数 wc -c file sed文本替换 sed一般用于对文本内容做替换，操作时是逐行操作\nsed的基本工作方式是：\n将文件以行为单位读取到内存（这个内存也叫模式空间） 使用sed的每个脚本对该行进行操作 处理完成后输出该行 格式\nsed ‘操作命令’ 一个或多个文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 sed的替换命令s: sed \u0026#39;s/旧的字符串/新的字符串/\u0026#39; 文件名 sed接多个指令 sed -e \u0026#39;s/旧的字符串/新的字符串/\u0026#39; -e \u0026#39;s/旧的字符串/新的字符串/\u0026#39; 文件名 首处替换 sed \u0026#39;s/text/replace_text/\u0026#39; file //替换每一行的第一处匹配的text 全局替换 sed \u0026#39;s/text/replace_text/g\u0026#39; file 默认替换后，输出替换后的内容，如果需要直接替换原文件,使用-i: sed -i \u0026#39;s/text/repalce_text/g\u0026#39; file 移除空白行 sed \u0026#39;/^$/d\u0026#39; file 第一个匹配的括号内容使用标记 1 来引用 sed \u0026#39;s/hello\\([0-9]\\)/\\1/\u0026#39; file 查看和查找文件内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 显示时同时显示行号: cat -n 按页显示列表内容: ls -al | more 只看前10行: head -10 ** 显示文件第一行: head -1 filename 显示文件倒数第五行: tail -5 filename 查看两个文件间的差别: diff file1 file2 动态显示文本最新信息: tail -f crawler.log egrep查询文件内容： egrep \u0026#39;apache\u0026#39; jmeter.log 在log中查找含有apache的 Bash快捷输入或删除 1 2 3 4 Ctl-U 删除光标到行首的所有字符,在某些设置下,删除全行 Ctl-W 删除当前光标到前边的最近一个空格之间的字符 Ctl-H backspace,删除光标前边的字符 Ctl-R 匹配最相近的一个文件，然后输出 磁盘管理 查看磁盘空间 1 2 3 4 5 6 7 8 9 10 查看磁盘空间利用大小:-h: human缩写，以易读的方式显示结果 df -h 查看当前目录所占空间大小，-s 递归整个目录的大小 du -sh 查看当前目录下所有子文件夹排序后的大小: for i in `ls`; do du -sh $i; done | sort 或者： du -sh `ls` | sort 打包与压缩 1 2 3 4 5 6 7 8 9 10 11 12 13 14 tar -zcvf \u0026lt;打包压缩后的文件名\u0026gt; \u0026lt;要打包压缩的文件\u0026gt; 打包 z：调用 gzip 压缩命令进行压缩 c：打包文件 v：显示运行过程 f：指定文件名 压缩，生成demo.txt.gz gzip demo.txt tar -zxvf test.tar.gz -C /usr**（- C 代表指定解压的位置）解压 x：代表解包 解压 解压缩 gunzip/bzip 进程管理工具 查询进程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 查询正在运行的进程信息: ps -aux/ ps -ef 查询进程ID（适合只记得部分进程字段） pgrep -l \u0026#39;进程名\u0026#39; 以完整的格式显示所有的进程 ps -ajx 展示进程加被占用的端口 netstat -ntlp 显示进程信息，并实时更新 top 打开后，输入M：按使用内存排序 打开后，输入P：按使用CPU排序,查看系统中使用CPU、使用内存最多的进程 打开后，输入i:使top不显示任何闲置或者僵死进程 打开后，输入q：退出 查看端口占用的进程状态： lsof -i:3306 查看用户username的进程所打开的文件 lsof -u username 查询init进程当前打开的文件 lsof -c init 终止进程 1 2 3 4 5 6 7 8 杀死指定PID的进程 (PID为Process ID) kill PID 杀死相关进程 kill -9 3434 杀死job工作 (job为job number) kill %job 分析线程栈 使用命令pmap，来输出进程内存的状况，可以用来分析线程堆栈；\n1 pmap PID 性能监控 监控CPU 1 2 3 4 5 6 7 8 9 查看CPU使用率 sar -u eg: $sar -u 1 2 后面的两个参数表示监控的频率，比如例子中的1和2，表示每秒采样一次，总共采样2次； 查看CPU平均负载，sar指定-q后，就能查看运行队列中的进程数、系统上的进程大小、平均负载等； sar -q 1 2 查询内存 1 2 3 4 5 查看内存使用状况 sar指定-r之后，可查看内存使用状况; sar -rh 1 2 查看内存使用量 free -mh 查询页面交换 查看页面交换发生状况 页面发生交换时，服务器的吞吐量会大幅下降；服务器状况不良时，如果怀疑因为内存不足而导致了页面交换的发生，可以使用sar -W这个命令来确认是否发生了大量的交换；\n1 sar -W 1 3 综合应用 当系统中sar不可用时，可以使用以下工具替代：linux下有 vmstat、Unix系统有prstat\neg： 查看cpu、内存、使用情况： vmstat n m （n 为监控频率、m为监控次数）\n1 2 3 4 5 6 vmstat 1 3 procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu---- r b swpd free buff cache si so bi bo in cs us sy id wa 0 0 86560 42300 9752 63556 0 1 1 1 0 0 0 0 99 0 1 0 86560 39936 9764 63544 0 0 0 52 66 95 5 0 95 0 0 0 86560 42168 9772 63556 0 0 0 20 127 231 13 2 84 0 使用watch 工具监控变化 当需要持续的监控应用的某个数据变化时，watch工具能满足要求； 执行watch命令后，会进入到一个界面，输出当前被监控的数据，一旦数据变化，便会高亮显示变化情况；\neg：操作redis时，监控内存变化：\n1 2 3 4 5 6 7 8 9 watch -d -n 1 \u0026#39;./redis-cli info | grep memory\u0026#39; (以下为watch工具中的界面内容，一旦内存变化，即实时高亮显示变化） Every 1.0s: ./redis-cli info | grep memory Mon Apr 28 16:10:36 2014 used_memory:45157376 used_memory_human:43.07M used_memory_rss:47628288 used_memory_peak:49686080 used_memory_peak_human:47.38M 系统状况 1 2 3 4 5 6 7 8 9 10 11 free -h：查看内存使用情况 kill -9 pid：杀死编号为pid的进程 传递某个具体的信号：kill -s SIGTERM pid netstat -nt：查看所有网络连接 netstat -an: 查看当前系统端口使用情况 w：列出当前登陆的用户 ping www.baidu.com：检查是否连网 其他常用命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 如何要求一个服务开机自启动？ 在CentOS中 1. 新建一个脚本 zookeeper 2. 为新建的脚本 zookeeper 添加可执行权限，命令是:chmod +x zookeeper 3. 把 zookeeper 这个脚本添加到开机启动项里面，命令是：chkconfig --add zookeeper 4. 如果想看看是否添加成功，命令是：chkconfig --list 在Ubuntu中，chkconfig被sysv-rc-conf 所替代 在软件源列表sources.list（位置在/etc/apt/sources.list）文件中的末尾添加如下内容： deb http://archive.ubuntu.com/ubuntu/ trusty main universe restricted multiverse 然后：sudo apt-get update sudo apt-get install sysv-rc-conf sudo sysv-rc-conf 按 q 退出 Vim常用命令 vim的配置文件是~/.vimrc（如果没有就在用户目录下创建）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 (1) i：进入编辑模式 (2) ESC：进入一般命令模式 (3) h 或 左箭头键：光标向左移动一个字符 (4) j 或 向下箭头：光标向下移动一个字符 (5) k 或 向上箭头：光标向上移动一个字符 (6) l 或 向右箭头：光标向右移动一个字符 (7) n\u0026lt;Space\u0026gt;：n表示数字，按下数字后再按空格，光标会向右移动这一行的n个字符 (8) 0 或 功能键[Home]：光标移动到本行开头 (9) $ 或 功能键[End]：光标移动到本行末尾 (10) G：光标移动到最后一行 (11) :n 或 nG：n为数字，光标移动到第n行 (12) gg：光标移动到第一行，相当于1G (13) n\u0026lt;Enter\u0026gt;：n为数字，光标向下移动n行 (14) /word：向光标之下寻找第一个值为word的字符串。 (15) ?word：向光标之上寻找第一个值为word的字符串。 (16) n：重复前一个查找操作 (17) N：反向重复前一个查找操作 (18) :n1,n2s/word1/word2/g：n1与n2为数字，在第n1行与n2行之间寻找word1这个字符串，并将该字符串替换为word2 (19) :1,$s/word1/word2/g：将全文的word1替换为word2 (20) :1,$s/word1/word2/gc：将全文的word1替换为word2，且在替换前要求用户确认。 (21) v：选中文本 (22) d：删除选中的文本 (23) dd: 删除当前行 (24) y：复制选中的文本 (25) yy: 复制当前行 (26) p: 将复制的数据在光标的下一行/下一个位置粘贴 (27) u：撤销 (28) Ctrl + r：取消撤销 (29) 大于号 \u0026gt;：将选中的文本整体向右缩进一次 (30) 小于号 \u0026lt;：将选中的文本整体向左缩进一次 (31) :w 保存 (32) :w! 强制保存 (33) :q 退出 (34) :q! 强制退出 (35) :wq 保存并退出 (36) :set paste 设置成粘贴模式，取消代码自动缩进 (37) :set nopaste 取消粘贴模式，开启代码自动缩进 (38) :set nu 显示行号 (39) :set nonu 隐藏行号 (40) gg=G：将全文代码格式化 (41) :noh 关闭查找关键词高亮 (42) Ctrl + q：当vim卡死时，可以取消当前正在执行的命令 异常处理： 每次用vim编辑文件时，会自动创建一个.filename.swp的临时文件。 如果打开某个文件时，该文件的swp文件已存在，则会报错。此时解决办法有两种： (1) 找到正在打开该文件的程序，并退出 (2) 直接删掉该swp文件即可 全部复制到系统剪切板 ggvG -\u0026gt; \u0026#34;+y -\u0026gt; ctrl + v 快速退出Vim :wq 保存并退出 :x 保存并退出 shift + ZZ : 保存并退出 shift + ZQ : 退出不保存 tmux常用命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 (1) tmux：新建一个session，其中包含一个window，window中包含一个pane，pane里打开了一个shell对话框。 (2) 按下Ctrl + a后手指松开，然后按%：将当前pane左右平分成两个pane。 (3) 按下Ctrl + a后手指松开，然后按\u0026#34;（注意是双引号\u0026#34;）：将当前pane上下平分成两个pane。 (4) Ctrl + d：关闭当前pane；如果当前window的所有pane均已关闭，则自动关闭window；如果当前session的所有window均已关闭，则自动关闭session。 (5) 鼠标点击可以选pane。 (6) 按下ctrl + a后手指松开，然后按方向键：选择相邻的pane。 (7) 鼠标拖动pane之间的分割线，可以调整分割线的位置。 (8) 按住ctrl + a的同时按方向键，可以调整pane之间分割线的位置。 (9) 按下ctrl + a后手指松开，然后按z：将当前pane全屏/取消全屏。 (10) 按下ctrl + a后手指松开，然后按d：挂起当前session。 (11) tmux a：打开之前挂起的session。 (12) 按下ctrl + a后手指松开，然后按s：选择其它session。 方向键 —— 上：选择上一项 session/window/pane 方向键 —— 下：选择下一项 session/window/pane 方向键 —— 右：展开当前项 session/window 方向键 —— 左：闭合当前项 session/window (13) 按下Ctrl + a后手指松开，然后按c：在当前session中创建一个新的window。 (14) 按下Ctrl + a后手指松开，然后按w：选择其他window，操作方法与(12)完全相同。 (15) 按下Ctrl + a后手指松开，然后按PageUp：翻阅当前pane内的内容。 (16) 鼠标滚轮：翻阅当前pane内的内容。 (17) 在tmux中选中文本时，需要按住shift键。（仅支持Windows和Linux，不支持Mac，不过该操作并不是必须的，因此影响不大） (18) tmux中复制/粘贴文本的通用方式： (1) 按下Ctrl + a后松开手指，然后按[ (2) 用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板 (3) 按下Ctrl + a后松开手指，然后按]，会将剪贴板中的内容粘贴到光标处 参考资料 Linux基础 - Linux Tools Quick Tutorial\nLinux命令手册\n","permalink":"https://lmingyul.github.io/posts/tech/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","summary":"\u003c!DOCTYPE HTML\u003e \u003c!DOCTYPE HTML\u003e 文件操作命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 cd - ls 列","title":"Linux常用命令"},{"content":"","permalink":"https://lmingyul.github.io/links/","summary":"","title":""},{"content":"| 名字 | Taiming Liang | | 坐标 | 广东 深圳 | | 职业 | 后端程序员 | | 描述 | 合肥工业大学硕士。喜欢Codeing，喜欢倒腾对提升效率的工具及方法，很高兴认识你~！ |\n","permalink":"https://lmingyul.github.io/about/","summary":"| 名字 | Taiming Liang | | 坐标 | 广东 深圳 | | 职业 | 后端程序员 | | 描述 | 合肥工业大学硕士。喜欢Codeing，喜欢倒腾对提升效率的工具及方法，很高兴认识","title":"👨‍💻个人画像"}]